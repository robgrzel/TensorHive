swagger: "2.0"

info:
  title: "{{title}}"
  version: "1.0"

basePath: /v1.0

paths:
  /users:
    get:
      responses:
        '200':
          description: 'All fetched with success.'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/CreateUserController'
      responses:
        '201':
          description: 'Successfully created.'
        '409':
          description: 'Duplication error.'
        '500':
          description: 'Not registered due to an error.'
  /reservations:
    get:
      parameters:
        - in: query
          name: nodeId
          type: integer
      responses:
        '200':
          description: 'All fetched with success.'
          schema:
            type: array
            items:
              $ref: '#/definitions/ReservationEvent'
    post:
      parameters:
        - in: body
          name: reservation_event
          required: True
          schema:
            $ref: '#/definitions/CreateReservationEventController'
      responses:
        '201':
          description: 'Successfully created.'
        '500':
          description: 'Not created due to an error.'
  '/reservations/{id}':
    delete:
      parameters:
        - in: path
          name: id
          required: true
          type: integer
      responses:
        '204':
          description: 'Successfully deleted.'
        '404':
          description: 'Not found.'

  /machines:
    get:
      responses:
        '200':
          description: 'Fetch a list of machines'
          schema:
            type: array
            items:
              $ref: '#/definitions/Machine'
  # Not implemented yet
  # '/users/{id}':
  #   put:
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         type: integer
  #       - in: body
  #         name: user
  #         required: true
  #         schema:
  #           $ref: '#/definitions/User'
  #     responses:
  #       '200':
  #         description: 'Update a user by ID'
  #       # TODO Add response when not found, etc.
  #   delete:
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         type: integer
  #     responses:
  #       '204':
  #         description: 'Delete a user by ID'
  #   get:
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         type: integer
  #     responses:
  #       '200':
  #         description: 'Fetch a user by ID'
  #         schema:
  #           $ref: '#/definitions/User'
  #       # TODO Add response when not found, etc.
definitions:
  CreateUserController:
    type: object
    properties:
      username: { type: string }
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username: { type: string }
      createdAt:
        type: string
        format: date-time
  Machine:
    type: string
        
  CreateReservationEventController:
    type: object
    properties:
      title: { type: string }
      description: { type: string }
      nodeId: { type: integer}
      userId: { type: integer}
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
      # TODO Add user id, node id
  ReservationEvent:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title: { type: string }
      description: { type: string }
      nodeId: { type: integer}
      userId: { type: integer}
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
      createdAt:
        type: string
        format: date-time
      # TODO Add user id, node id
